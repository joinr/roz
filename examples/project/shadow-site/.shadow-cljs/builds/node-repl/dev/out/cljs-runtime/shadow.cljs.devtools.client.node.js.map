{"version":3,"sources":["shadow/cljs/devtools/client/node.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.node","js/shadow.cljs.devtools.client.node.client-id","shadow.cljs.devtools.client.node/client-id","cljs.core/random-uuid","js/shadow.cljs.devtools.client.node.ws-ref","shadow.cljs.devtools.client.node/ws-ref","cljs.core/volatile!","shadow.cljs.devtools.client.node/ws-close","temp__5739__auto__","cljs.core/deref","tcp","cljs.core/vreset!","shadow.cljs.devtools.client.node/ws-msg","msg","ws","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","err","js/console.error","p__29739","map__29740","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.node/node-eval","js","source-map-json","result","js/SHADOW_NODE_EVAL","shadow.cljs.devtools.client.node/is-loaded?","src","goog.object/get","js/SHADOW_IMPORTED","js/Error","shadow.cljs.devtools.client.node/closure-import","js/SHADOW_IMPORT","p__29749","map__29750","shadow.cljs.devtools.client.node/repl-init","id","repl-state","done","map__29752","repl-sources","seq__29755","cljs.core/seq","chunk__29757","count__29758","i__29759","map__29793","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__29795","cljs.core/first","cljs.core/next","output-name","p__29797","map__29798","shadow.cljs.devtools.client.node/repl-invoke","shadow.cljs.devtools.client.env/repl-call","shadow.cljs.devtools.client.env/repl-error","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__29800","map__29801","shadow.cljs.devtools.client.node/repl-set-ns","p__29803","map__29804","shadow.cljs.devtools.client.node/repl-require","sources","reload-namespaces","e29806","seq__29807","chunk__29808","count__29809","i__29810","map__29815","map__29817","provides","or__4185__auto__","cljs.core/some","e","p__29819","map__29820","shadow.cljs.devtools.client.node/build-complete","info","reload-info","map__29823","compiled","warnings","iter__4582__auto__","s__29826","cljs.core/LazySeq","xs__6292__auto__","map__29831","iterys__4578__auto__","s__29828","c__4580__auto__","size__4581__auto__","b__29830","cljs.core/chunk-buffer","i__29829","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29827","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__29825","resource-name","cljs.core/not","warning","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","map__29833","files-to-require","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__29838","map__29839","ns","cljs.core/contains?","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__29835","map__29836","resource-id","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$2","seq__29841","chunk__29842","count__29843","i__29844","shadow.cljs.devtools.client.env/before-load-src","p__29846","map__29847","shadow.cljs.devtools.client.node/process-message","type","G__29849","cljs.core/Keyword","js/Date.now","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.env/async-ops","shadow.cljs.devtools.client.node/ws-connect","url","shadow.cljs.devtools.client.env/ws-url","client","js/shadow.js.shim.module$ws","req","res","status","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/console.log","data","flags","e29850","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.env/enabled"],"sourcesContent":["(ns shadow.cljs.devtools.client.node\n  (:require [shadow.cljs.devtools.client.env :as env]\n            [\"ws\" :as ws]\n            [cljs.reader :as reader]\n            [goog.object :as gobj]))\n\n(defonce client-id (random-uuid))\n\n(defonce ws-ref (volatile! nil))\n\n(defn ws-close []\n  (when-some [tcp @ws-ref]\n    (.close tcp)\n    (vreset! ws-ref nil)))\n\n(defn ws-msg [msg]\n  (when-some [ws @ws-ref]\n    (.send ws (pr-str msg)\n      (fn [err]\n        (when err\n          (js/console.error \"REPL msg send failed\" err))))\n    ))\n\n(defn node-eval [{:keys [js source-map-json] :as msg}]\n  (let [result (js/SHADOW_NODE_EVAL js source-map-json)]\n    result))\n\n(defn is-loaded? [src]\n  (true? (gobj/get js/SHADOW_IMPORTED src)))\n\n(defn closure-import [src]\n  {:pre [(string? src)]}\n  (js/SHADOW_IMPORT src))\n\n(defn repl-init\n  [{:keys [id repl-state] :as msg} done]\n  (let [{:keys [repl-sources]} repl-state]\n\n    (doseq [{:keys [output-name] :as src} repl-sources\n            :when (not (is-loaded? output-name))]\n      (closure-import output-name))\n\n    (ws-msg {:type :repl/init-complete :id id})\n    (done)\n    ))\n\n(defn repl-invoke [{:keys [id] :as msg}]\n  (let [result\n        (-> (env/repl-call #(node-eval msg) env/repl-error)\n            (assoc :id id))]\n\n    (ws-msg result)))\n\n(defn repl-set-ns [{:keys [id] :as msg}]\n  ;; nothing for the client to do really\n  (ws-msg {:type :repl/set-ns-complete :id id}))\n\n(defn repl-require\n  [{:keys [id sources reload-namespaces] :as msg} done]\n  (try\n    (doseq [{:keys [provides output-name] :as src} sources]\n      (when (or (not (is-loaded? output-name))\n                (some reload-namespaces provides))\n        (closure-import output-name)))\n    (ws-msg {:type :repl/require-complete :id id})\n\n\n    (catch :default e\n      (js/console.error \"repl/require failed\" e)\n      (ws-msg {:type :repl/require-error :id id :error (.-message e)})))\n  (done))\n\n(defn build-complete\n  [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n      \n      (let [{:keys [sources compiled]}\n            info\n\n            files-to-require\n            (->> sources\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter (fn [{:keys [ns resource-id]}]\n                           (or (contains? compiled resource-id)\n                               (contains? (:always-load reload-info) ns))))\n                 (map :output-name)\n                 (into []))]\n\n        (when (seq files-to-require)\n          (env/do-js-reload\n            msg\n            #(doseq [src files-to-require]\n               (env/before-load-src src)\n               (closure-import src))\n            ))))))\n\n(defn process-message\n  [{:keys [type] :as msg} done]\n  ;; (js/console.log \"repl-msg\" msg)\n  (case type\n    :repl/init\n    (repl-init msg done)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/require\n    (repl-require msg done)\n\n    :repl/ping\n    (ws-msg {:type :repl/pong :time-server (:time-server msg) :time-runtime (js/Date.now)})\n\n    :build-configure\n    :ignored\n\n    :build-start\n    :ignored\n\n    :build-complete\n    (build-complete msg)\n\n    :build-failure\n    :ignored\n\n    :worker-shutdown\n    (.terminate @ws-ref)\n\n    ;; default\n    (prn [:repl-unknown msg]))\n\n  (when-not (contains? env/async-ops type)\n    (done)))\n\n(defn ws-connect []\n  (let [url\n        (env/ws-url :node)\n\n        client\n        (ws. url [])]\n\n    (.on client \"open\"\n      (fn []\n        (vreset! ws-ref client)))\n\n    (.on client \"unexpected-response\"\n      (fn [req ^js res]\n        (let [status (.-statusCode res)]\n          (if (= 406 status)\n            (js/console.log \"REPL connection rejected, probably stale JS connecting to new server.\")\n            (js/console.log \"REPL unexpected error\" (.-statusCode res))\n            ))))\n\n    (.on client \"message\"\n      (fn [data flags]\n        (try\n          (env/process-ws-msg data process-message)\n          (catch :default e\n            (js/console.error \"failed to process message\" data e)))))\n\n    (.on client \"close\"\n      (fn []\n        (js/console.log \"REPL client disconnected\")\n        ))\n\n    (.on client \"error\"\n      (fn [err]\n        (js/console.log \"REPL client error\" err)))\n    ))\n\n(when env/enabled\n  (ws-close) ;; if this is reloaded, reconnect the socket\n  (ws-connect))\n\n"]}